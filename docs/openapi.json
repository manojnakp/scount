{
  "openapi": "3.1.0",
  "info": {
    "title": "SCount",
    "summary": "A simple expense sharing application for splitting and balancing bills among friends.",
    "description": "# Usage\n\n* Add expenses by entering the amount and who is paying.\n* Invite participants to the group (SCount) so that they\n  can log their own expenses and review what others\n  have added.\n* View your balance at any time and check the total\n  expense of your entire group.\n* Money you owe others and money you are owed are\n  managed elegantly.\n* Let the application do the calculations. It finds the\n  most efficient way for everyone to pay each other what\n  they owe.\n\n# Key Features\n\n## Everyone can add\n\nYour friends can join via their phones or online to\nadd expenses and check their balances. Anyone involved\nin an SCount can add friends to it.\n\n## Split unevenly\n\nNot every cost will be split equally. Set a different\nlevel of reimbursement for each person. An expense can\nbe split in a particular ratio or according to custom\namounts.\n\n## Share your SCount\n\nSharing an SCount is as simple as sharing the unique url\nof the SCount. Any participating member can view or log\none's expenses to it with no hassle.\n",
    "version": "0.1.0",
    "contact": {
      "name": "Manojna",
      "url": "https://github.com/manojnakp",
      "email": "m@mkpsays.in"
    },
    "license": {
      "name": "MIT License",
      "identifier": "MIT"
    }
  },
  "servers": [
    {
      "url": "/.",
      "description": "api server hosted at root path"
    }
  ],
  "paths": {
    "/auth/register": {
      "summary": "Operations related to user sign up",
      "post": {
        "operationId": "UserRegister",
        "tags": [
          "auth"
        ],
        "summary": "Sign up a new user",
        "description": "Send user information and password to sign up for SCount and obtain a unique userid",
        "requestBody": {
          "description": "User information and new set of credentials for sign up",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "./RegisterRequest.json"
              },
              "example": {
                "username": "John doe",
                "email": "john@jdoe.net",
                "password": "iamjd0e"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign up successfull, here's your user id.",
            "headers": {
              "location": {
                "description": "URI of the user resource for the newly signed up user",
                "schema": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL of user resource for the newly registered user."
                },
                "example": "/users/2kj3e9ps8uq934ph"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./RegisterResponse.json"
                },
                "example": {
                  "user_id": "2kj3e9ps8uq934ph"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/DefaultResponse"
          }
        }
      }
    },
    "/auth/login": {
      "summary": "Operations related to user sign in",
      "post": {
        "operationId": "UserLogin",
        "tags": [
          "auth"
        ],
        "summary": "Sign in a user",
        "description": "User authenticates oneself into the SCount API using valid credentials.",
        "requestBody": {
          "description": "User credentials for sign in",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "./LoginRequest.json"
              },
              "example": {
                "email": "john@jdoe.net",
                "password": "iamjd0e"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in successfull, use this token to authenticate your requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./LoginResponse.json"
                },
                "example": {
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEyNTc4OTc2MDAsInN1YiI6IjJrajNlOXBzOHVxOTM0cGgifQ.n0_har5M6WYK5HmSsQarZbJp5A5dNrvKfbINA6eYEQs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/DefaultResponse"
          }
        }
      }
    },
    "/auth/password": {
      "summary": "Operations related to password change",
      "post": {
        "operationId": "PasswordChange",
        "tags": [
          "auth"
        ],
        "summary": "Change user password",
        "description": "Request for updating the set of credentials used for authenticating the user.",
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "description": "Old and new set of credentials for update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "./PasswordChange.json"
              },
              "example": {
                "old": "iamjd0e",
                "new": "jd0esecret"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Password change successfull"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/DefaultResponse"
          }
        }
      }
    },
    "/users/{uid}": {
      "summary": "Operations related to information on a particular user",
      "parameters": [
        {
          "$ref": "#/components/parameters/userid"
        }
      ],
      "get": {
        "tags": [
          "users"
        ],
        "summary": "fetch user details",
        "description": "Get the user information about the one requested in `uid`",
        "operationId": "UserFetch",
        "security": [
          {
            "token": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserFetch"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/DefaultResponse"
          }
        }
      }
    },
    "/me": {
      "summary": "Operations related to one's own user account.",
      "get": {
        "tags": [
          "users"
        ],
        "summary": "fetch my user details",
        "description": "Get the user information about the currently logged in user.",
        "operationId": "MyselfFetch",
        "security": [
          {
            "token": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserFetch"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/DefaultResponse"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "replace my user details",
        "description": "Replace the user record of the currently logged in user in the server with the following data.",
        "operationId": "MyselfReplace",
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "description": "Details to replace in the server user record.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "./MyselfReplace.json"
              },
              "example": {
                "name": "Alex"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Replace user details successful"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/DefaultResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "update my user details",
        "description": "Update the user information for the currently logged in user.",
        "operationId": "MyselfUpdate",
        "security": [
          {
            "token": []
          }
        ],
        "requestBody": {
          "description": "User details to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "./MyselfUpdate.json"
              },
              "example": {
                "name": "Alex"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Update user details successful"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableContent"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/DefaultResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "delete user details",
        "description": "Remove the user record from the server for the currently logged in user.",
        "operationId": "MyselfRemove",
        "security": [
          {
            "token": []
          }
        ],
        "responses": {
          "204": {
            "description": "Remove user details successful"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "default": {
            "$ref": "#/components/responses/DefaultResponse"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "UserFetch": {
        "description": "User details for the requested user id *uid*",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "./UserResponse.json"
            },
            "example": {
              "id": "zjkhbumnhp6v5eld",
              "email": "john@jdoe.net",
              "name": "John Doe"
            }
          }
        }
      },
      "DefaultResponse": {
        "description": "Could not serve the request due to certain issues."
      },
      "BadRequest": {
        "description": "Cannot serve content because of malformed request body or syntax"
      },
      "Unauthorized": {
        "description": "User is not authenticated, the resource is protected."
      },
      "Forbidden": {
        "description": "Server understands the request and identifies the user but refuses to authorize it."
      },
      "NotFound": {
        "description": "Server cannot find the requested resource."
      },
      "Conflict": {
        "description": "The request conflicts or causes a conflict (after requested operation) with the state of server."
      },
      "UnsupportedMediaType": {
        "description": "The media format of the requested data is not supported by the server, so the server is rejecting the request."
      },
      "UnprocessableContent": {
        "description": "The request was well-formed but was unable to be followed due to semantic errorsor validation failure."
      },
      "InternalServerError": {
        "description": "The server has encountered a situation it does not know how to handle."
      }
    },
    "parameters": {
      "userid": {
        "name": "uid",
        "in": "path",
        "description": "*uid* is the user id that uniquely identifies the requested user resource.",
        "required": true,
        "schema": {
          "type": "string",
          "description": "user id of the requested user"
        },
        "example": "536j5khg64jh632i"
      }
    },
    "securitySchemes": {
      "token": {
        "description": "Token based authentication using JWT in 'Authorization' header",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Operations related to authentication"
    },
    {
      "name": "users",
      "description": "Operations related users"
    }
  ]
}